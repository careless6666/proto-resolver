// Code generated by MockGen. DO NOT EDIT.
// Source: parser.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIFileReader is a mock of IFileReader interface.
type MockIFileReader struct {
	ctrl     *gomock.Controller
	recorder *MockIFileReaderMockRecorder
}

// MockIFileReaderMockRecorder is the mock recorder for MockIFileReader.
type MockIFileReaderMockRecorder struct {
	mock *MockIFileReader
}

// NewMockIFileReader creates a new mock instance.
func NewMockIFileReader(ctrl *gomock.Controller) *MockIFileReader {
	mock := &MockIFileReader{ctrl: ctrl}
	mock.recorder = &MockIFileReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFileReader) EXPECT() *MockIFileReaderMockRecorder {
	return m.recorder
}

// ReadFile mocks base method.
func (m *MockIFileReader) ReadFile(filePath string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", filePath)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockIFileReaderMockRecorder) ReadFile(filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockIFileReader)(nil).ReadFile), filePath)
}
